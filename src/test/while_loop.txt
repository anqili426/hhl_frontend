method test() returns (sum: Int)
    ensures forall _s: State :: <_s> implies get(_s, sum) == 102
{

    var n: Int
    n := 0
    sum := 1

    while (n <= 100)
    invariant forall _s: State :: <_s> implies (get(_s, sum) == get(_s, n) + 1) && (get(_s, n) <= 101)
    {
            n := n + 1
            sum := sum + 1
    }

}

method test2() returns (sum: Int)
    ensures forall _s: State :: <_s> implies get(_s, sum) == 102
{

   var n: Int
   n := 0
   sum := 1

   while (n <= 100)
   invariant forall _s: State :: <_s> implies get(_s, n) == $n && get(_s, sum) == $n + 1 && $n <= 101
   {
           n := n + 1
           sum := sum + 1
   }
}

method test3(n: Int) returns (res: Int)
    requires forall _s1: State, _s2:State :: <_s1> && <_s2> implies get(_s1, n) == get(_s2, n)
    ensures forall _s1: State, _s2:State :: <_s1> && <_s2> implies get(_s1, res) == get(_s2, res)
{
    assume n == 11 && res == 0

    var i: Int
    i := n

    while (i > 10)
    invariant forall _s: State :: <_s> implies get(_s, i) >= 10 && get(_s, res) == get(_s, n) - get(_s, i)
    invariant forall _s: State :: <_s> implies get(_s, n) == 11
    {
        i := i - 1
        res := res + 1
        var x: Int
        x := 1
    }
}




