method test(x: Int) returns (y: Int)
requires exists _s: State :: <_s>
ensures exists _s: State :: <_s> && get(_s, y) == 1
{
    havoc y {hint1}
    use hint1(1)
}

method test2() returns (y: Int)
requires exists _s: State :: <_s>
ensures exists _s: State :: <_s> && get(_s, y) == 10
{
    y := 0
    while(y < 10)
    {hint2} invariant $n <= 10 ==> exists _s: State :: <_s> && get(_s, y) <= 10 && get(_s, y) == $n
    {
        y := y + 1
    }

    use hint2(10)
}

method randomNumGen() returns (x: Int)
   requires exists _s: State :: <_s>
   ensures forall _n: Int :: _n < 9 && _n > 0 ==> exists _s: State :: <_s> && get(_s, x) == _n
   {
      havoc x {hint}
      assume x < 9 && x > 0
      use forall _n: Int :: _n < 9 && _n > 0 ==> hint(_n)
   }

method testHavoc(x: Int) returns (res: Int)
   requires exists _s: State :: <_s> && get(_s, x) == 1
   ensures exists _s: State :: <_s> && get(_s, res) == get(_s, x)
   {
      havoc res {hint3}
      use forall _s: State :: <_s> ==> hint3(get(_s, x))
   }