method loop_example1(x: Int, n: Int, i: Int)
returns (res: Int)
requires forall <_s> :: _s[x] > 0 && _s[n] > 0
requires forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2
                ==> _s1[x] <= _s2[x] && _s1[n] == _s2[n]
ensures forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2
                ==> _s1[res] <= _s2[res]
{
    var ind: Int
    ind := 0
    res := 0
    frame forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2
                          ==> _s1[n] == _s2[n] {
        while (ind < n)
        invariant forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2
                ==> _s1[x] <= _s2[x] && _s1[res] <= _s2[res]
        invariant forall <_s> :: _s[ind] <= _s[n] && _s[ind] == $n
        {
            res := res + x
            ind := ind + 1
        }
    }
}