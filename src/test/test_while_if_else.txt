method test(x: Int) returns (y: Int)
    requires forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, x) == get(_s2, x)
    ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, y) == get(_s2, y)
    ensures forall _s: State :: <_s> ==> get(_s, y) == get(_s, x)
{
    assume x > 0

    var i: Int
    i := x


    while (i > 0)
        frame forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, x) == get(_s2, x)
        invariant forall _s: State :: <_s> ==> get(_s, i) >= 0 && (get(_s, i) == 0 ==> get(_s, y) == get(_s, x))
    {
        if (i == 1) {
            y := x
        } else {
            y := 2
        }
        i := i - 1
    }

}






