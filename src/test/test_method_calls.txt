method callee(h: Int) returns (l: Int)
ensures forall <_s1>: State, <_s2>: State :: (exists <_s3>: State :: get(_s1, h) == get(_s3, h) && get(_s2, l) == get(_s3, l))
{
    var i: Int
    i := 0
    l := 0

    while forAllExistsRule (i < 100)
    invariant forall <_s1>: State, <_s2>: State :: (exists <_s3>: State :: get(_s1, i) == get(_s2, i) && get(_s3, i) == get(_s1, i) && get(_s1, h) == get(_s3, h) && get(_s2, l) == get(_s3, l))
    decreases 100 - i
    {
        l := l + h - h
        i := i + 1
    }
}

method caller (h2: Int) returns (l2: Int)
ensures forall <_s1>: State, <_s2>: State :: (exists <_s3>: State :: get(_s1, h2) == get(_s3, h2) && get(_s2, l2) == get(_s3, l2)) {
    l2 := callee(h2)
    l2 := l2 + h2 - h2
}