method test() returns (sum: Int) 
requires exists <_s> :: true
ensures exists <_s> :: _s[sum] == 0
{
    sum := 0
    var i: Int
    var j: Int 
    var p: Int 
    var n: Int
    i := 0
    j := 0
    p := 0

    while existsRule (i < 10)
		invariant exists <_s> :: ((_s[i] <= 5) ==> ((_s[j] == 0) && (_s[p] == 0))) &&
                                    ((_s[i] > 5) ==> ((_s[j] == 1) && (_s[p] == 1))) &&        
                                    _s[sum] == 0 && 0 <= _s[i] && _s[i] <= 10
	    decreases 10 - i
    {
       var increment: Int

        // g(j, p)
        havoc increment {hint3}
        use forall <_s> :: hint3(_s[p])
        use forall <_s> :: hint3(_s[p] - 1)
        use hint3(1)
        assume (j == 0 ==> increment == p) &&
               (j == 1 ==> increment == p - 1) &&
               (j < 0 || j > 1) ==> increment == 1

        sum := sum + increment

        if (i == 5) {
            j := 1
        }

        // flipCoin()
        havoc p {hint2}
        assume p == 0 || p == 1

        i := i + 1
        use hint2(0)
        use hint2(1)
    }
    //use hint1(10)
}
