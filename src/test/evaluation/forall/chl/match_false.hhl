// P1
method compare1(score1: Int, seq1Start1: Int, seq2Start1: Int, score2: Int, seq1Start2: Int, seq2Start2: Int, i: Int) returns (res: Int)
requires forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2 ==>
    _s1[score1] == _s2[score2] && _s1[seq1Start1] == _s2[seq1Start2] &&
    _s1[seq2Start1] == _s2[seq2Start2] && _s1[score2] == _s2[score1] &&
    _s1[seq1Start2] == _s2[seq1Start1] && _s1[seq2Start2] == _s2[seq2Start1]
ensures forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2 ==>
    ((_s1[res] > 0 && _s2[res] < 0) || (_s1[res] < 0 && _s2[res] > 0) ||
        (_s1[res] == 0 && _s2[res] == 0))
{
    if (score1 > score2) {
        res := -1
    } else {
        if ( (score1 == score2) && ((seq1Start1 < seq1Start2) && (seq2Start1 < seq2Start2)) ) {
            res := -1
        } else {
            if ((score1 == score2) && !((seq1Start1 < seq1Start2) && (seq2Start1 < seq2Start2))) {
                res := 0
            } else {
                res := 1
            }
        }
    }
}

// P2
method compare2(score1: Int, seq1Start1: Int, seq2Start1: Int, score2: Int, seq1Start2: Int, seq2Start2: Int, i: Int) returns (res: Int)
requires forall <_s1>, <_s2>, <_s3> :: _s1[i] == 1 && _s2[i] == 2 && _s3[i] == 3 ==> 
    _s1[score1] == _s3[score1] && _s1[seq1Start1] == _s3[seq1Start1] && _s1[seq2Start1] == _s3[seq2Start1] &&
    _s1[score2] == _s2[score1] && _s1[seq1Start2] == _s2[seq1Start1] && _s1[seq2Start2] == _s2[seq2Start1] &&
    _s2[score2] == _s3[score2] && _s2[seq1Start2] == _s3[seq1Start2] && _s2[seq2Start2] == _s3[seq2Start2]
ensures forall <_s1>, <_s2>, <_s3> :: _s1[i] == 1 && _s2[i] == 2 && _s3[i] == 3 ==>
    (_s1[res] > 0 && _s2[res] > 0 ==> _s3[res] > 0)
{
    if (score1 > score2) {
        res := -1
    } else {
        if ( (score1 == score2) && ((seq1Start1 < seq1Start2) && (seq2Start1 < seq2Start2)) ) {
            res := -1
        } else {
            if ((score1 == score2) && !((seq1Start1 < seq1Start2) && (seq2Start1 < seq2Start2))) {
                res := 0
            } else {
                res := 1
            }
        }
    }
}

// P3
method compare3(score1: Int, seq1Start1: Int, seq2Start1: Int, score2: Int, seq1Start2: Int, seq2Start2: Int, i: Int) returns (res: Int)
requires forall <_s1>, <_s2>, <_s3> :: _s1[i] == 1 && _s2[i] == 2 && _s3[i] == 3 ==> 
    _s1[score1] == _s3[score1] && _s1[seq1Start1] == _s3[seq1Start1] && _s1[seq2Start1] == _s3[seq2Start1] &&
    _s1[score2] == _s2[score1] && _s1[seq1Start2] == _s2[seq1Start1] && _s1[seq2Start2] == _s2[seq2Start1] &&
    _s2[score2] == _s3[score2] && _s2[seq1Start2] == _s3[seq1Start2] && _s2[seq2Start2] == _s3[seq2Start2]
ensures forall <_s1>, <_s2>, <_s3> :: _s1[i] == 1 && _s2[i] == 2 && _s3[i] == 3 ==>
    (_s1[res] == 0 ==> ((_s2[res] > 0 && _s3[res] > 0) || (_s2[res] < 0 && _s3[res] < 0) ||
        (_s2[res] == 0 && _s3[res] == 0)))
{
    if (score1 > score2) {
        res := -1
    } else {
        if ( (score1 == score2) && ((seq1Start1 < seq1Start2) && (seq2Start1 < seq2Start2)) ) {
            res := -1
        } else {
            if ((score1 == score2) && !((seq1Start1 < seq1Start2) && (seq2Start1 < seq2Start2))) {
                res := 0
            } else {
                res := 1
            }
        }
    }
}