// Original benchmark:
// Source: Hiroshi Unno, Tachio Terauchi and Eric Koskinen. 2021. Constraint-Based Relational Verification.
// Available at: https://github.com/hiroshi-unno/coar/blob/299e979bfce7d9b0532586bfc42b449fd0451531/benchmarks/pfwnCSP/cav2021rel/HalfSquareNI.clp

method test(h: Int, low: Int) returns (y: Int)
requires forall <_s1>, <_s2> :: _s1[low] == _s2[low]
ensures forall <_s1>, <_s2> :: _s1[y] == _s2[y] 
{
    assume low > h && h > 0
    var i: Int
    var v: Int 
    i := 0
    v := 0
    y := 0

    while forAllExistsRule (h > i)
    invariant forall <_s> :: _s[h] >= _s[i] && 
                                            _s[y] == (_s[i] * (_s[i] + 1)) / 2
    {
        i := i + 1
        y := y + i
    } 

    v := 1

    while forAllExistsRule (low > i)
    invariant forall <_s> :: _s[low] >= _s[i] &&
                                            _s[y] == (_s[i] * (_s[i] + 1)) / 2
    {
        i := i + 1
        y := y + i
    }
}
