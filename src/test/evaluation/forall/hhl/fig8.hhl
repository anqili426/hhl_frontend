method fib (n: Int, t: Int) returns (a: Int)
requires forall <_s1>, <_s2> :: (_s1[t] == 1 && _s2[t] == 2) ==> _s1[n] >= _s2[n]
ensures forall <_s1>, <_s2> :: (_s1[t] == 1 && _s2[t] == 2) ==> _s1[n] >= _s2[n]
{
    var b: Int
    var i: Int
    a := 0
    b := 1
    i := 0
    while (i < n)
    invariant forall <_s1>, <_s2> :: (_s1[t] == 1 && _s2[t] == 2) ==>
                                (_s1[n] - _s1[i]) >= (_s2[n] - _s2[i]) &&
                                _s1[a] >= _s2[a] && _s1[b] >= _s2[b]
    invariant forall <_s> :: _s[b] >= _s[a] && _s[a] >= 0
    {
        var tmp: Int
        tmp := b
        b := a + b
        a := tmp
        i := i + 1
    }

}