method test(h: Int, low: Int) returns (y: Int)
requires forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, low) == get(_s2, low)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, y) == get(_s2, y) 
{
    assume low > h && h > 0
    var i: Int
    var v: Int 
    i := 0
    v := 0
    y := 0

    while (h > i) 
    invariant forall _s: State :: <_s> ==> get(_s, h) >= get(_s, i) && 
                                            get(_s, y) == (get(_s, i) * (get(_s, i) + 1)) / 2
    {
        i := i + 1
        y := y + i
    } 

    v := 1

    while (low > i) 
    invariant forall _s: State :: <_s> ==> get(_s, low) >= get(_s, i) &&
                                            get(_s, y) == (get(_s, i) * (get(_s, i) + 1)) / 2
    {
        i := i + 1
        y := y + i
    }
}