/*
method testLoop(x: Int, i: Int) returns (y: Int)
requires forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2 ==> _s1[x] <= _s2[x]
ensures forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2 ==> _s1[y] <= _s2[y]
{
        y := 0
        while forAllExistsRule (y < x)
        invariant forall <_s1>, <_s2> :: _s1[i] == 1 && _s2[i] == 2 ==>
                _s1[y] <= _s2[y] &&
                (_s1[x] - _s1[y]) <= (_s2[x] - _s2[y])
        {
            y := y + 1
        }
}

method fib_mono(n: Int, t: Int) returns (a: Int)
requires forall <_s1>, <_s2> :: _s1[t] == 1 && _s2[t] == 2 ==> _s1[n] >= _s2[n]
ensures forall <_s1>, <_s2> :: _s1[t] == 1 && _s2[t] == 2 ==> _s1[a] >= _s2[a]
{
    var b: Int
    var i: Int

    a := 0
    b := 1
    i := 0

    while forAllExistsRule (i < n)
    invariant forall <_s1>, <_s2> :: _s1[t] == 1 && _s2[t] == 2 ==>
                    ((_s1[n] - _s1[i]) >= (_s2[n] - _s2[i])) &&
                    (_s1[a] >= _s2[a]) &&
                    (_s1[b] >= _s2[b])
    invariant forall <_s> :: (_s[b] >= _s[a]) && (_s[a] >= 0)
    {
        var tmp: Int
        tmp := b
        b := a + b
        a := tmp
        i := i + 1
    }
}


method test(h: Int) returns (l: Int)
ensures forall <_s1>, <_s2> :: (exists <_s3> :: _s1[h] == _s3[h] && _s2[l] == _s3[l])
{
    var i: Int
    i := 0
    l := 0

    var t: Int

    while forAllExistsRule (i < 100)
    invariant forall <_s1>, <_s2> :: (exists <_s3> :: _s1[i] == _s2[i] && _s3[i] == _s1[i] && _s1[h] == _s3[h] && _s2[l] == _s3[l])
    decreases t
    {
        l := l + h - h
        i := i + 1
    }
} */

method test1(a: Int) returns (b: Int)

{
    while (true) {

    }
}
