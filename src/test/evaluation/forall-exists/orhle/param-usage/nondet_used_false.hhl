// Original benchmark:
// Source: Robert Dickerson, Qianchuan Ye, Michael K. Zhang, and Benjamin Delaware. 2022. RHLE: Modular Deductive Verification of Relational ∀∃ Properties.
// Available at: https://github.com/rcdickerson/orhle/blob/6f699e0809cc59e89ca2dd47a735fe1a6dc7a100/experiments/param-usage/nondet-used.imp

method unused(p1: Int, p2: Int, i: Int) returns (res: Int)
requires forall <_s1a>, <_s2a> :: _s1a[i] == 1 && _s2a[i] == 2 ==>
                    (exists <_s1b>, <_s2b> :: _s1b[i] == 3 && _s2b[i] == 4 &&
                                              _s1a[p1] == _s1b[p1] &&
                                              _s1a[p2] != _s1b[p2] &&
                                              _s2a[p1] != _s2b[p1] &&
                                              _s2a[p2] == _s2b[p2])
ensures forall <_s1a>, <_s2a> :: _s1a[i] == 1 && _s2a[i] == 2 ==>
             (exists <_s1b>, <_s2b> :: _s1b[i] == 3 && _s2b[i] == 4 && (_s1a[res] == _s1b[res] || _s2a[res] == _s2b[res]))
{
    var x: Int
    var y: Int
    x := p1 + p2
    var r: Int
    havoc r {hint}
    assume r == 0 || r == 1
    use hint(0)
    use hint(1)
    if (r == 0) {
        res := x
    } else {
        res := p1
    }
}