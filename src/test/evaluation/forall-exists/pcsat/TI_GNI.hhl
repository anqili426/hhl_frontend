method TI_GNI(low: Int, high: Int) returns (res: Int)
requires forall <_s1>, <_s2> :: _s1[low] == _s2[low]
ensures forall <_s1>, <_s2> :: (exists <_s3> :: _s3[high] == _s1[high] && _s3[res] == _s2[res])
{
    var x: Int
    if (high > 0) {
        havoc x {hint1}
        if (x >= low) {
            res := x
        } else {
            res := low
        }
    } else {
        x := low
        var k: Int
        havoc k {hint2}
        assume k >= 0
        res := x + k
    }

    // use forall <_s1>, <_s2> :: hint1(_s2[low]) && hint2()

}