method p1_simple() returns (h: Int, o: Int)
ensures forall _s1: State :: <_s1> ==> (exists _s2: State :: <_s2> && get(_s2, h) == ((-1) * get(_s1, h)) && get(_s2, o) == get(_s1, o))
{
    o := 1
    havoc h {hint1}

    havoc o {hint2}
    use hint2(1)
    use hint2(-1)
    assume o == 1 || o == (-1)

    if (h > 0) {
        o := (-1) * o
    } else {
        o := (-1) * o + (h - h)
    }
    use forall _s1: State :: <_s1> ==> hint1(-1 * get(_s1, h))
}