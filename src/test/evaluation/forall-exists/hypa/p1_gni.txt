method p1_gni() returns (h: Int, o: Int)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> (exists _s3: State :: <_s3> && get(_s3, h) == get(_s2, h) && get(_s3, o) == get(_s1, o))
{
    o := 1
    havoc h {hint1}

    havoc o {hint2}
    use hint2(1)
    use hint2(-1)
    assume o == 1 || o == (-1)

    if (h > 0) {
        o := (-1) * o
    } else {
        o := (-1) * o + (h - h)
    }

    use forall _s1: State, _s2: State :: <_s1> && <_s2> ==> hint1(get(_s2, h))
}