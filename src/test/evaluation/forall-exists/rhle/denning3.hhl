method denning3(e_in: Int, i_in: Int, f_in: Int, x_in: Int, sum_in: Int, t: Int)
returns (e_out: Int, i_out: Int, f_out: Int, x_out: Int, sum_out: Int, res: Int)
requires forall <_s1>, <_s2> :: (_s1[t] == 1 && _s2[t] == 2) ==> (_s1[e_in] == _s2[e_in] && _s1[i_in] == _s2[i_in])
// TODO: strengthen the precondition
ensures exists <_s1> :: _s1[t] == 1 && (forall <_s2> :: _s2[t] == 2 ==>
                                            (_s1[e_out] != _s2[e_out] ||
                                             _s1[i_out] != _s2[i_out]))
{
    var max_sum: Int
    var err: Int
    max_sum := 100
    err := 0

    sum_out := 0
    i_out := 0
    e_out := 1
    f_out := f_in
    x_out := x_in

    while forAllExistsRule (e_out == 1 && err == 0)
    {
        sum_out := sum_out + x_out
        i_out := i_out + 1
        f_out := i_out
        if (sum_out > max_sum) {
            err := 1
        }
    }

    if (err == 1) {
        res := 0
    } else {
        res := 1
    }
}