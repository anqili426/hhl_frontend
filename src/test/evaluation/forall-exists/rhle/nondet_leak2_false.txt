method leak2(high: Int, low: Int) returns (res: Int)
requires forall _s1: State :: <_s1> ==>
    (exists _s2: State :: <_s2> && get(_s1, low) == get(_s2, low) && get(_s1, high) != get(_s2, high))
ensures forall _s1: State :: <_s1> ==>
    (exists _s2: State :: <_s2> && get(_s1, low) == get(_s2, low) && get(_s1, res) == get(_s2, res) && get(_s1, high) != get(_s2, high))
{
    var coin: Int
    havoc coin {hint1}
    use hint1(0)
    use hint1(1)
    assume coin == 0 || coin == 1

    if (coin == 0) {
        res := high + low
    } else {
        res := low
    }
}