method leak2(high: Int, low: Int, i: Int) returns (res: Int)
requires exists <_s> :: _s[i] == 2
requires forall <_s1>, <_s2> :: (_s1[i] == 1 && _s2[i] == 2) ==> (_s1[low] == _s2[low])
ensures forall <_s1> :: _s1[i] == 1 ==>
    (exists <_s2> :: (_s2[i] == 2 && _s1[res] == _s2[res]))
{
    var coin: Int
    havoc coin {hint1}
    use hint1(0)
    use hint1(1)
    assume coin == 0 || coin == 1

    if (coin == 0) {
        res := high + low
    } else {
        res := low
    }
}

