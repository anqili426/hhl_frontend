method denning1(f1_in: Int, f2_in: Int, f3_in: Int, i: Int) returns (f1_out: Int, f2_out: Int)
requires exists <_s> :: _s[i] == 2
requires forall <_s1>, <_s2> :: (_s1[i] == 1 && _s2[i] == 2) ==> (_s1[f1_in] == _s2[f1_in] && _s1[f2_in] == _s2[f2_in])
ensures forall <_s1> :: _s1[i] == 1 ==>
    (exists <_s2> :: (_s2[i] == 2 && _s1[f1_out] == _s2[f1_out] && _s1[f2_out] == _s2[f2_out]))
{
    var t: Int
    var n: Int
    var sum: Int

    t := 1
    n := 0
    sum := 0

    f1_out := f1_in
    f2_out := f2_in

    while syncRule (t <= 100)
    invariant forall <_s1>, <_s2> :: _s1[t] == _s2[t]
    invariant forall <_s1> :: _s1[i] == 1 ==>
              (exists <_s2> :: (_s2[i] == 2 && _s1[f1_out] == _s2[f1_out] && _s1[f2_out] == _s2[f2_out]))
    {
        var flag: Int
        flag := f1_out
        f2_out := flag
        var x: Int
        x := f3_in
        if (flag != 0) {
            n := n + 1
            sum := sum + x
        }
        t := t + 1
    }

    // We comment out this line because n could be zero
    // Also, this assignment doesn't affect the postcondition
    // f4_out := n + sum + sum / n
}