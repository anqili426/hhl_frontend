method parity(h_in: Int, l_in: Int, i: Int) returns (h_out: Int, l_out: Int)
requires forall <_s1>, <_s2> :: (_s1[i] == 1 && _s2[i] == 2) ==>
                    (_s1[l_in] == _s2[l_in])
requires exists <_s1> :: _s1[i] == 1 && _s1[h_in] % 2 == 0
requires forall <_s2> :: _s2[i] == 2 && _s2[h_in] % 2 == 1
ensures exists <_s1> :: _s1[i] == 1 &&
    (forall <_s2> :: _s2[i] == 2 ==> _s1[l_out] != _s2[l_out])
{
    h_out := h_in % 2
    if (h_out == 1) {
        l_out := 1
        h_out := 1
    } else {
        l_out := 0
        h_out := 0
    }
}