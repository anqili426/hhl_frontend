method denning2(f1_in: Int, f2_in: Int, f3_in: Int, t: Int) returns (f1_out: Int, f2_out: Int)
requires forall <_s1>, <_s2> :: (_s1[t] == 1 && _s2[t] == 2) ==> (_s1[f1_in] == _s2[f1_in] && _s1[f2_in] == _s2[f2_in])
requires exists <_s1> :: _s1[t] == 1 && _s1[f1_in] != 0 && _s1[f3_in] > 0 && (forall <_s2> :: _s2[t] == 2 ==> (_s1[f3_in] < _s2[f3_in]))
ensures exists <_s1> :: _s1[t] == 1 && (forall <_s2> :: _s2[t] == 2 ==>
                                            (_s1[f1_out] != _s2[f1_out] ||
                                             _s1[f2_out] != _s2[f2_out]))
{
    var i: Int
    var n: Int
    var sum: Int

    i := 1
    n := 0
    sum := 0

    f1_out := f1_in
    f2_out := f2_in

    while (i <= 100)
    invariant forall <_s1>, <_s2> :: _s1[i] == _s2[i]
    invariant exists <_s1> :: _s1[t] == 1 && _s1[f1_out] != 0 && _s1[f3_in] > 0 &&
                        (forall <_s2> :: _s2[t] == 2 ==> _s1[f1_out] == _s2[f1_out] &&
                                                         _s1[f2_out] == _s2[f2_out] &&
                                                         _s1[n] == _s2[n] &&
                                                         _s1[f3_in] < _s2[f3_in] &&
                                                         _s1[sum] <= _s2[sum] &&
                                                         (_s1[i] > 1 ==> _s1[sum] < _s2[sum])
                        )
    decreases 101 - i
    {
        var flag: Int
        flag := f1_out
        f2_out := flag
        var x: Int
        x := f3_in
        if (flag != 0) {
            n := n + 1
            sum := sum + x
        }
        i := i + 1
    }

    // We omit sum / n from the assignment below because n could be zero
    // Removing this term doesn't affect whether postcondition should hold or not
    f2_out := n + sum
    f1_out := f2_out
}