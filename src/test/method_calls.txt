method test1(a: Int, b: Int) returns (res: Int)
requires forall _s: State :: <_s> ==> get(_s, a) == get(_s, b)
ensures forall _s: State :: <_s> ==> get(_s, res) == 2
{
    res := 2
}

method test2(a: Int, b: Int) {

}

method test3(x: Int) returns (res: Int)
requires forall _s: State :: <_s> ==> get(_s, x) == 2
ensures forall _s: State :: <_s> ==> get(_s, res) == 3 && get(_s, x) == 2
{
    res := test1(x, x)
    res := res + 1

    test2(x, res)
}