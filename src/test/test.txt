method test(x: Int) returns (y: Int)
requires forall _s: State :: <_s> ==> get(_s, x) > 0
requires forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, x) == get(_s2, x)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, y) == get(_s2, y)
{
    y := 0
    while (y < x)
    invariant forall _s1: State, _s2: State :: <_s1> && <_s2> ==> (get(_s1, y) == get(_s2, y) && get(_s1, y) == $n)
    invariant forall _s: State :: (<_s> && get(_s, y) == get(_s, x)) ==> (get(_s, x) == $n)
    {
        y := y + 1
    }
}