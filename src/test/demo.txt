method loop_example1(x: Int, n: Int, i: Int)
returns (res: Int)
requires forall _s: State :: <_s> ==> get(_s, x) > 0 && get(_s, n) > 0
requires forall _s1: State, _s2: State :: <_s1> && <_s2> && get(_s1, i) == 1 && get(_s2, i) == 2
                ==> get(_s1, x) <= get(_s2, x) && get(_s1, n) == get(_s2, n)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> && get(_s1, i) == 1 && get(_s2, i) == 2
                ==> get(_s1, res) <= get(_s2, res)
{
    var ind: Int
    ind := 0
    res := 0
    frame forall _s1: State, _s2: State :: <_s1> && <_s2> && get(_s1, i) == 1 && get(_s2, i) == 2
                          ==> get(_s1, n) == get(_s2, n) {
        while (ind < n)
        invariant forall _s1: State, _s2: State :: <_s1> && <_s2> && get(_s1, i) == 1 && get(_s2, i) == 2
                ==> get(_s1, x) <= get(_s2, x) && get(_s1, res) <= get(_s2, res)
        invariant forall _s: State :: <_s> ==> get(_s, ind) <= get(_s, n) && get(_s, ind) == $n
        {
            res := res + x
            ind := ind + 1
        }
    }
}