method sni(low_in: Int, high_in: Int) returns (low_out: Int, high_out: Int)
requires forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, low_in) == get(_s2, low_in)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, low_out) == get(_s2, low_out)
{
    if (low_in > 0) {
        low_out := low_in + 1
    } else {
        low_out := low_in * (-1) + 2
    }
}

method sni_bug(low_in: Int, high_in: Int) returns (low_out: Int, high_out: Int)
requires exists _s1: State, _s2: State :: <_s1> && <_s2> && get(_s1, low_in) == get(_s2, low_in) && get(_s1, high_in) > 0 && get(_s2, high_in) < 0
ensures exists _s1: State, _s2: State :: <_s1> && <_s2> && get(_s1, low_out) != get(_s2, low_out)
{
    if (high_in > 0) {
        low_out := low_in + 1
    } else {
        low_out := low_in * (-1) + 2
    }
}