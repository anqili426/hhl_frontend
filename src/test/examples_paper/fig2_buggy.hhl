method randNat() returns (y:Int)
    requires exists <_s> :: true
	ensures forall <_s> :: 1 <= _s[y] && _s[y] <= 2
	ensures exists <_s> :: _s[y] == 1
	ensures exists <_s> :: _s[y] == 2
{
	var x: Int
	havoc x {hint}
	use hint(0)
	use hint(1)
	if (x > 0) {
		y := 1
	}
	else {
		y := 2
	}
}

method buggy() returns (x: Int)
requires exists <_s> :: true
ensures exists <<_s>> :: _s[x] == 1
ensures exists <<_s>> :: _s[x] == 2
{
    x := randNat()
    var y: Int
    y := x + x
    assert y % 2 == 1
}