method test(x: Int) returns (y: Int)
requires exists _s: State :: <_s>
ensures exists <_s> :: _s[y] == 1
{
    havoc y {hint1}
    use hint1(1)
}

method test2() returns (y: Int)
requires exists _s: State :: <_s>
ensures exists <_s> :: _s[y] == 10
{
    y := 0
    while(y < 10)
    {hint2} invariant $n <= 10 ==> exists <_s> :: _s[y] <= 10 && _s[y] == $n
    {
        y := y + 1
    }

    use hint2(10)
}

method testHavoc(x: Int) returns (res: Int)
   requires exists <_s> :: _s[x] == 1
   ensures exists <_s> :: _s[res] == _s[x]
   {
      havoc res {hint3}
      use forall <_s> :: hint3(_s[x])
   }