method test1(x: Int) returns (res: Int)
requires forall <_s1>, <_s2> :: _s1[x] == _s2[x]
ensures forall <_s1>, <_s2> :: _s1[res] == _s2[res]
{
    assume x > 0
    var i: Int
    i := 0
    res := 0

    var t: Int

    frame forall <_s1>, <_s2> :: _s1[x] == _s2[x] {
        while (i < x)
            invariant forall <_s> :: _s[i] <= _s[x] && _s[res] == _s[i] * _s[x]
        {
            res := res + x
            i := i + 1
        }
    }
}

method test2(x: Int) returns (res: Int)
requires forall <_s1>, <_s2> :: _s1[x] == _s2[x]
ensures forall <_s> :: _s[res] == _s[x]
ensures forall <_s1>, <_s2> :: _s1[res] == _s2[res]
{

    assume x > 0
    var i: Int
    i := 0
    res := 0

    frame forall <_s1>, <_s2> :: _s1[x] == _s2[x] {
        while (i < x)
        invariant forall <_s> :: _s[i] <= _s[x] && _s[res] == _s[i]
        {
            while (i < x)
            invariant forall <_s> :: _s[i] <= _s[x]
            {
                i := i + 1
            }
            res := i
        }
    }
}

method test3(y: Int, i: Int) returns (res: Int)
requires forall <_s1>, <_s2> :: _s1[y] == _s2[y]
ensures forall <_s1>, <_s2> :: _s1[res] == _s2[res]
{
    res := 0
        if (y >= 0) {
            while (res < y)
                invariant forall <_s> :: _s[res] <= _s[y]
                invariant forall <_s> :: _s[y] >= 0
            {
                res := res + 1
            }

        } else {
            while (res < (-1) * y)
                invariant forall <_s> :: _s[res] <= (-1) * _s[y]
                invariant forall <_s> :: _s[y] < 0
            {
                res := res + 1
            }
        }
}