method test1(x: Int) returns (res: Int)
requires forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, x) == get(_s2, x)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, res) == get(_s2, res)
{
    assume x > 0
    var i: Int
    i := 0
    res := 0

    var t: Int

    while (i < x)
    frame forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, x) == get(_s2, x)
    invariant forall _s: State :: <_s> ==> get(_s, i) <= get(_s, x) && get(_s, res) == get(_s, i) * get(_s, x)
    {
        res := res + x
        i := i + 1
    }
}

method test2(x: Int) returns (res: Int)
requires forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, x) == get(_s2, x)
ensures forall _s: State :: <_s> ==> get(_s, res) == get(_s, x)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, res) == get(_s2, res)
{

    assume x > 0
    var i: Int
    i := 0
    res := 0

    while (i < x)
    frame forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, x) == get(_s2, x)
    invariant forall _s: State :: <_s> ==> get(_s, i) <= get(_s, x) && get(_s, res) == get(_s, i)
    {
        while (i < x)
        invariant forall _s: State :: <_s> ==> get(_s, i) <= get(_s, x)
        {
            i := i + 1
        }
        res := i
    }
}

method test3(y: Int, i: Int) returns (res: Int)
requires forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, y) == get(_s2, y)
ensures forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, res) == get(_s2, res)
{
    res := 0
    if (y >= 0) {
        while (res < y)
            frame forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, y) == get(_s2, y)
            invariant forall _s: State :: <_s> ==> get(_s, res) <= get(_s, y)
            invariant forall _s: State :: <_s> ==> get(_s, y) >= 0
        {
            res := res + 1
        }

    } else {
        while (res < (-1) * y)
            frame forall _s1: State, _s2: State :: <_s1> && <_s2> ==> get(_s1, y) == get(_s2, y)
            invariant forall _s: State :: <_s> ==> get(_s, res) <= (-1) * get(_s, y)
            invariant forall _s: State :: <_s> ==> get(_s, y) < 0
        {
            res := res + 1
        }
    }
}